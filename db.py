# db.py
import aiosqlite
from config import DB_PATH


async def _ensure_users_columns(conn):
    """
    –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ users –µ—Å—Ç—å
    rank_messages, rank_comments, rank_combined.
    """
    cols = {}
    async with conn.execute("PRAGMA table_info(users)") as cur:
        async for cid, name, ctype, notnull, dflt, pk in cur:
            cols[name] = True

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏. DEFAULT –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É.
    if "rank_messages" not in cols:
        await conn.execute("ALTER TABLE users ADD COLUMN rank_messages TEXT DEFAULT ''")
    if "rank_comments" not in cols:
        await conn.execute("ALTER TABLE users ADD COLUMN rank_comments TEXT DEFAULT ''")
    if "rank_combined" not in cols:
        await conn.execute("ALTER TABLE users ADD COLUMN rank_combined TEXT DEFAULT ''")


async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–∑ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π ‚Äî –Ω–∏–∂–µ –º–∏–≥—Ä–∞—Ü–∏—è —ç—Ç–æ –ø–æ—á–∏–Ω–∏—Ç)
        await db.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id   INTEGER PRIMARY KEY,
            username  TEXT,
            joined_at TEXT,
            messages  INTEGER DEFAULT 0,
            fanfics   INTEGER DEFAULT 0,
            comments  INTEGER DEFAULT 0
        )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        await db.execute('''
        CREATE TABLE IF NOT EXISTS achievements (
            user_id INTEGER,
            code    TEXT,
            PRIMARY KEY (user_id, code)
        )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
        await db.execute('''
        CREATE TABLE IF NOT EXISTS activity (
            user_id  INTEGER,
            date     TEXT,
            messages INTEGER DEFAULT 0,
            comments INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, date)
        )
        ''')

        # üîß –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ users
        await _ensure_users_columns(db)

        await db.commit()


# ========== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ==========
async def register_user(user_id: int, username: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username, joined_at) VALUES (?, ?, datetime('now'))",
            (user_id, username)
        )
        await db.commit()


async def get_user_profile(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT username, joined_at, messages, fanfics, comments,
                   rank_messages, rank_comments, rank_combined
            FROM users
            WHERE user_id = ?
        ''', (user_id,)) as cursor:
            return await cursor.fetchone()


async def update_user_rank(user_id: int) -> dict:
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∑–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict c –∫–ª—é—á–∞–º–∏ 'messages' | 'comments' | 'combined' –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
    """
    # –¥–æ—Å—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á—ë—Ç—á–∏–∫–∏ –∏ —Ä–∞–Ω–≥–∏
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT messages, comments, 
                   COALESCE(rank_messages, ''), 
                   COALESCE(rank_comments, ''), 
                   COALESCE(rank_combined, '')
            FROM users WHERE user_id = ?
        ''', (user_id,)) as cur:
            row = await cur.fetchone()
            if not row:
                return {}
            messages, comments, old_rm, old_rc, old_rk = row

    # —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–Ω–≥–∏ –ø–æ –≤–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º
    rm = "‚Äî"
    if messages >= 3000:
        rm = "üå™ –°—Ç–∏—Ö–∏–π–Ω–æ–µ –±–µ–¥—Å—Ç–≤–∏–µ"
    elif messages >= 1000:
        rm = "üî• –õ–µ–≥–µ–Ω–¥–∞ —á–∞—Ç–∞"
    elif messages >= 300:
        rm = "üì£ –ì–æ–ª–æ—Å –∫–∞–Ω–∞–ª–∞"
    elif messages >= 100:
        rm = "üó® –ë–æ–ª—Ç—É–Ω"
    else:
        rm = "üê£ –ù–æ–≤–∏—á–æ–∫"

    rc = "‚Äî"
    if comments >= 1000:
        rc = "ü´Ö –í–µ—Ä—Ö–æ–≤–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    elif comments >= 500:
        rc = "üéñ –ü–æ–ª–∫–æ–≤–Ω–∏–∫-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    elif comments >= 400:
        rc = "üéñ –ú–∞–π–æ—Ä-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    elif comments >= 300:
        rc = "üß† –ö–∞–ø–∏—Ç–∞–Ω-–∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    elif comments >= 100:
        rc = "üë®‚Äçüè´ –°—Ç–∞—Ä—à–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    elif comments >= 30:
        rc = "üéØ –ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    elif comments >= 15:
        rc = "üßê –ú–ª–∞–¥—à–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    elif comments >= 5:
        rc = "üí° –†—è–¥–æ–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä"
    else:
        rc = "üê£ –ù–æ–≤–∏—á–æ–∫"

    rk = "‚Äî"
    if messages >= 5000 and comments >= 2000:
        rk = "üß≠ –ë–æ–≥ FicBen"
    elif messages >= 2000 and comments >= 1000:
        rk = "üõ° –í–µ—Ç–µ—Ä–∞–Ω"
    elif messages >= 300 and comments >= 50:
        rk = "üåü –ê–∫—Ç–∏–≤–∏—Å—Ç"
    else:
        rk = "‚Äî"

    changed = {}
    if rm != old_rm:
        changed["messages"] = rm
    if rc != old_rc:
        changed["comments"] = rc
    if rk != old_rk:
        changed["combined"] = rk

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî —ç—Ç–æ –¥—ë—à–µ–≤–æ)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            UPDATE users
               SET rank_messages = ?, rank_comments = ?, rank_combined = ?
             WHERE user_id = ?
        ''', (rm, rc, rk, user_id))
        await db.commit()

    return changed

async def increment_message_count(user_id: int, is_comment: bool = False) -> dict:
    """
    –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á—ë—Ç—á–∏–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–Ω–≥–æ–≤ (–∏–ª–∏ –ø—É—Å—Ç–æ–π dict, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–µ–Ω—è–ª–æ—Å—å).
    """
    # +1 —Å–æ–æ–±—â–µ–Ω–∏–µ (+1 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET messages = messages + 1 WHERE user_id = ?",
            (user_id,)
        )
        if is_comment:
            await db.execute(
                "UPDATE users SET comments = comments + 1 WHERE user_id = ?",
                (user_id,)
            )
        await db.commit()

    # –∞–ø–¥–µ–π—Ç –¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –±—ã–ª–æ —É —Ç–µ–±—è)
    from datetime import datetime
    today = datetime.utcnow().strftime("%Y-%m-%d")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            INSERT INTO activity (user_id, date, messages, comments)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(user_id, date) DO UPDATE SET
                messages = messages + ?,
                comments = comments + ?
        ''', (user_id, today, 1, int(is_comment), 1, int(is_comment)))
        await db.commit()

    # –≤–µ—Ä–Ω—ë–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∏–ª–∏ –ø—É—Å—Ç–æ)
    return await update_user_rank(user_id)

async def set_user_rank(user_id: int, rank_type: str, rank_value: str):
    """rank_type: 'messages', 'comments', 'combined'"""
    field = f"rank_{rank_type}"
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(f"UPDATE users SET {field} = ? WHERE user_id = ?", (rank_value, user_id))
        await db.commit()


async def get_user_id_by_username(username: str):
    username = username.lstrip("@").lower()
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT user_id FROM users WHERE LOWER(username) = ?", (username,)
        ) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else None


async def get_all_users():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id, username FROM users ORDER BY username") as cursor:
            return await cursor.fetchall()


# ========== –ê—á–∏–≤–∫–∏ ==========
async def has_achievement(user_id: int, code: str) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT 1 FROM achievements WHERE user_id = ? AND code = ?",
            (user_id, code)
        ) as cursor:
            return await cursor.fetchone() is not None


async def award_achievement(user_id: int, code: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO achievements (user_id, code) VALUES (?, ?)",
            (user_id, code)
        )
        await db.commit()


async def get_user_achievements(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT code FROM achievements WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            return [row[0] async for row in cursor]


# ========== –ö–Ω–∏–≥–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ==========
async def set_user_books(user_id: int, books_count: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET fanfics = ? WHERE user_id = ?", (books_count, user_id))
        await db.commit()


async def get_user_activity_stats(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT date, messages, comments
            FROM activity
            WHERE user_id = ?
            ORDER BY date DESC
            LIMIT 7
        ''', (user_id,)) as cursor:
            return await cursor.fetchall()

